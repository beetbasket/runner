// Code generated by "enumer -json -trimprefix Type -type StdioType"; DO NOT EDIT.

package runner

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _StdioTypeName = "StdoutStderrStdin"

var _StdioTypeIndex = [...]uint8{0, 6, 12, 17}

const _StdioTypeLowerName = "stdoutstderrstdin"

func (i StdioType) String() string {
	if i < 0 || i >= StdioType(len(_StdioTypeIndex)-1) {
		return fmt.Sprintf("StdioType(%d)", i)
	}
	return _StdioTypeName[_StdioTypeIndex[i]:_StdioTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _StdioTypeNoOp() {
	var x [1]struct{}
	_ = x[TypeStdout-(0)]
	_ = x[TypeStderr-(1)]
	_ = x[TypeStdin-(2)]
}

var _StdioTypeValues = []StdioType{TypeStdout, TypeStderr, TypeStdin}

var _StdioTypeNameToValueMap = map[string]StdioType{
	_StdioTypeName[0:6]:        TypeStdout,
	_StdioTypeLowerName[0:6]:   TypeStdout,
	_StdioTypeName[6:12]:       TypeStderr,
	_StdioTypeLowerName[6:12]:  TypeStderr,
	_StdioTypeName[12:17]:      TypeStdin,
	_StdioTypeLowerName[12:17]: TypeStdin,
}

var _StdioTypeNames = []string{
	_StdioTypeName[0:6],
	_StdioTypeName[6:12],
	_StdioTypeName[12:17],
}

// StdioTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func StdioTypeString(s string) (StdioType, error) {
	if val, ok := _StdioTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _StdioTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to StdioType values", s)
}

// StdioTypeValues returns all values of the enum
func StdioTypeValues() []StdioType {
	return _StdioTypeValues
}

// StdioTypeStrings returns a slice of all String values of the enum
func StdioTypeStrings() []string {
	strs := make([]string, len(_StdioTypeNames))
	copy(strs, _StdioTypeNames)
	return strs
}

// IsAStdioType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i StdioType) IsAStdioType() bool {
	for _, v := range _StdioTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for StdioType
func (i StdioType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for StdioType
func (i *StdioType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("StdioType should be a string, got %s", data)
	}

	var err error
	*i, err = StdioTypeString(s)
	return err
}
